{"version":3,"sources":["components/ConfirmModal/index.js","components/AddNewLog/index.js","components/Log/index.js","App.js","serviceWorker.js","index.js"],"names":["state","_this$props","this","props","title","onConfirm","onCancel","react_default","a","createElement","className","style","display","showModal","onClick","Component","uuidv4","require","AddNewLog","message","_this2","components_ConfirmModal_default","log","time","moment","utc","format","id","onSubmitForm","setState","placeholder","value","onChange","e","target","fa","Log","timeISO","m","timeString","concat","onDelete","data","App","filtered","search","getLogs","arr","_this","map","src_components_Log","key","updatedData","filter","toLowerCase","includes","src_components_AddNewLog","newLog","Object","toConsumableArray","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f003ae94.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./index.css\"\n\nexport default class extends Component {\n    state = {\n\n    }\n\n    render() {\n        let { title, onConfirm, onCancel } = this.props;\n\n        return (\n            <div className=\"confirmModal\"\n                style={{ display: this.props.showModal ? \"block\" : \"none\" }}\n            >\n                <h1>{title}</h1>\n                <button onClick={onConfirm}>Confirm</button>\n                <button onClick={onCancel}>Cancel</button>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport \"./index.css\"\nimport moment from 'moment'\nimport ConfirmModal from '../ConfirmModal'\nimport { FaCommentAlt } from 'react-icons/fa';\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass AddNewLog extends Component {\n  state = {\n    title: \"\",\n    message: \"\",\n    showModal: false\n  }\n\n  render() {\n    return (\n      <div className=\"addNewLog\">\n        <ConfirmModal\n          showModal={this.state.showModal}\n          title=\"Submit log?\"\n          onConfirm={() => {\n            let log = this.state;\n            log.time = moment.utc().format()\n            log.id = uuidv4()\n            this.props.onSubmitForm(log)\n\n            this.setState({showModal: false})\n          }}\n          onCancel={() => {\n            this.setState({ showModal: false })\n          }}\n        />\n        <h1>Add new log</h1>\n        <input placeholder=\"Log Title\"\n          value={this.state.title}\n          onChange={(e) => {\n            let title = e.target.value;\n            this.setState({ title })\n          }}\n        />\n        <textarea placeholder=\"Log Message\"\n          value={this.state.message}\n          onChange={(e) => {\n            let message = e.target.value;\n            this.setState({ message })\n          }}\n\n        />\n        <button onClick={() => {\n          this.setState({showModal: true})\n        }}>\n        <FaCommentAlt />\n        <div>Submit Log</div>\n        \n        </button>\n      </div>\n    )\n  }\n}\n\nexport default AddNewLog","import React, { Component } from 'react';\nimport \"./index.css\"\nimport moment from 'moment'\nimport ConfirmModal from '../ConfirmModal'\n\nclass Log extends Component {\n\n    state = {\n        showModal: false\n    }\n\n    render() {\n        let log = this.props.log;\n        let { title, message, time: timeISO, id } = log;\n\n        // format time\n        let m = moment(timeISO)\n        let timeString = `${m.format(\"LTS\")}, ${m.format(\"MM-DD-YY\")}`\n\n        // console.log(this.state.showModal);\n\n        return (\n            <div className=\"log\">\n                <ConfirmModal\n                    showModal={this.state.showModal}\n                    title = \"Delete?\"\n                    onConfirm={() => {\n                        this.props.onDelete(id)\n                    }}\n                    onCancel={() => {\n                        this.setState({showModal: false})\n                    }}\n                />\n                <div className=\"log-container\">\n                    <div className=\"content\">\n                        <h1>{title}</h1>\n                        <p>{message}.</p>\n                        <p>{timeString}</p>\n                    </div>\n                    <button className=\"delete\" onClick={() => {\n                        this.setState({showModal: true})\n                    }}>Delete</button>\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\nexport default Log","import React, { Component } from 'react';\nimport './App.css';\nimport AddNewLog from './components/AddNewLog'\nimport Log from './components/Log'\n\n\nlet data = [\n  {\n    id: \"1\",\n    title: \"Alarm high energy consumption is triggered\",\n    message: \"Energy consumption of this asset is high. Please resolve this issue ASAP!!!\",\n    time: \"2019-04-10T17:47:50Z\"\n  },\n  {\n    id: \"2\",\n    title: \"New alarm created\",\n    message: \"A new alarm 'Low Apparent Power' has been created.\",\n    time: \"2018-04-10T14:47:50Z\"\n  }\n]\n\nclass App extends Component {\n\n  state = {\n    data,\n    filtered: data,\n    search: \"\"\n  }\n\n  getLogs = () => {\n    let arr = this.state.data;\n    if (this.state.search !== \"\") {\n      arr = this.state.filtered\n    }\n\n    return arr.map((log) => {\n      return <Log\n        key={log.id}\n        log={log}\n        onDelete={(id) => {\n\n          let updatedData = this.state.data.filter((log) => {\n            return log.id !== id\n          })\n\n          this.setState({ data: updatedData })\n\n        }}\n\n      />\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <input\n          placeholder=\"search\"\n          onChange={(e) => {\n            let search = e.target.value.toLowerCase();\n            let filtered = this.state.data.filter((log) => {\n              // filter by title\n              return log.title.toLowerCase().includes(search)\n            })\n            this.setState({ filtered, search })\n          }}\n          value={this.state.search}\n        />\n        <AddNewLog onSubmitForm={(newLog) => {\n          let data = [newLog, ...this.state.data]\n          this.setState({ data })\n        }} />\n        {this.getLogs()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}